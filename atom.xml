<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>为梦想加油！！！</title>
  
  <subtitle>大柔非柔，至刚无刚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-27T05:04:46.853Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>云凡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>YAML快速入门</title>
    <link href="http://yoursite.com/2018/12/23/YAML%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/12/23/YAML快速入门/</id>
    <published>2018-12-23T14:51:33.000Z</published>
    <updated>2018-12-27T05:04:46.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习微服务和Spring Cloud开发相关知识，在Spring Boot中，推荐使用properties或者YAML文件来完成配置，所以一开始学习使用的配置文件是properties文件，但是properties文件在表示层级关系和结构关系的方面有所欠缺，对于复杂的数据结构，YAML文件表示的清晰度会远远大于properties文件，所以我们使用YAML文件完成Spring Cloud的配置。</p><a id="more"></a><p><strong>properties文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8761</span><br><span class="line">eureka.client.registerWithEureka: false</span><br><span class="line">eureka.client.fetchRegistry: false</span><br><span class="line">eureka.client.serviceUrl.defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><p><strong>YAML文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: false #是否将自己注册到Eureka Server</span><br><span class="line">    fetchRegistry: false #是否从Eureka获取注册信息，默认为true</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/ #设置与Eureka Server交互的地址</span><br></pre></td></tr></table></figure><p>由上面两个文件对比可以看出，在处理层级关系的时候，properties文件需要使用路径来描述层级，尽管前缀相同的路径也需要重复书写，YAML文件使用缩进的方式表示层级关系，更加清晰明了。</p><p>写这篇总结的初衷是在公司刚开始使用微服务架构的过程中，上线部署的时候由于YAML配置文件写错了而导致上线过程很不顺利，这件事一方面提醒我们YAML文件校验工具的重要性（STS自带的<a href="https://github.com/oyse/yedit" target="_blank" rel="noopener">yedit插件</a>就挺好用的），另一方面对于YAML语法的理解也非常重要，希望通过总结能够将YAML的语法理解得更加深入，尽量避免犯错误。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>YAML （YAML Ain’t Markup Language）语言（发音 /ˈjæməl/ ）是一种简洁的非标记语言，YAML的设计目标，就是方便人类读写，YAML以数据为中心，使用空白、缩进、分行组织数据，使数据更加简洁易读。它实质上是一种通用的数据串行化格式。它的基本语法如下：</p><ul><li><p>大小写敏感</p></li><li><p>使用缩进代表层级关系</p></li><li><p>缩进只能使用空格，不能使用Tab</p></li><li><p>缩进空格的个数没有要求，同一层级的元素左对齐即可（一般2或4个空格）</p></li><li><p>使用#表示注释</p></li><li><p>字符串可以不加引号进行标注</p></li></ul><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>学习YAML的时候可以在<a href="http://nodeca.github.io/js-yaml/" target="_blank" rel="noopener">JS-YAML在线示例</a>进行在线练习。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>YAML使用”: “（冒号加<strong>空格</strong>，记住一定要有空格）来表示每一个<code>key: value</code>对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: value</span><br></pre></td></tr></table></figure><p>使用缩进代表层级关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key:</span><br><span class="line">  child1: value1</span><br><span class="line">  child2: value2</span><br></pre></td></tr></table></figure><p>YAML还支持流式（flow）语法表示对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: &#123;child1: value1, child2: value2&#125;</span><br></pre></td></tr></table></figure><p>较为复杂的对象格式，可以使用”? “（问号加空格）代表一个复杂的key，配合”: “（冒号加空格）代表一个value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? </span><br><span class="line">  - complexkey1</span><br><span class="line">  - complexkey2</span><br><span class="line">: </span><br><span class="line">  - complexvalue1</span><br><span class="line">  - complexvalue2</span><br></pre></td></tr></table></figure><p>代表<code>[complexkey1, complexkey2]: [complexvalue1, complexvalue2]</code>，也就是属性为<code>[complexkey1, complexkey2]</code>，值为<code>[complexvalue1, complexvalue2]</code>。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>用”- “（短横线加空格）表示数组的一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">American:</span><br><span class="line">  - Boston Red Sox</span><br><span class="line">  - Detroit Tigers</span><br><span class="line">  - New York Yankees</span><br></pre></td></tr></table></figure><p>还可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- </span><br><span class="line">  - Boston Red Sox</span><br><span class="line">  - Detroit Tigers</span><br><span class="line">  - New York Yankees</span><br></pre></td></tr></table></figure><p>这个可以理解为：<code>[[Boston Red Sox, Detroit Tigers, New York Yankees]]</code>，即数组元素也为数组。更加复杂的表示方法，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">persons:</span><br><span class="line">  - </span><br><span class="line">    name: Mark McGwire</span><br><span class="line">    hr: 65</span><br><span class="line">    avg: 0.278</span><br><span class="line">  - </span><br><span class="line">    name: Sammy Sosa</span><br><span class="line">    hr: 63</span><br><span class="line">    avg: 0.288</span><br></pre></td></tr></table></figure><p>其流式表示（<code>flow style</code>）为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persons: [&#123;name: Mark McGwire, hr: 65, avg: 0.278&#125;, &#123;name: Sammy Sosa, hr: 63, avg: 0.288&#125;]</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>YAML提供的常量包括：</p><ul><li><p>整数（int）</p></li><li><p>浮点数（float）</p></li><li><p>字符串（str）</p></li><li><p>NULL（null）</p></li><li><p>日期（date）</p></li><li><p>时间（datetime）</p></li><li><p>布尔（boolean）</p><p>参考下面的例子可以快速熟悉YAML中常量的使用：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">booleans: </span><br><span class="line">    - TRUE   #使用TRUE、true、True都可以</span><br><span class="line">    - FALSE  #使用FALSE、false、False都可以</span><br><span class="line">float:</span><br><span class="line">    - 3.14</span><br><span class="line">    - 4.5632e-3  #可以使用科学计数法</span><br><span class="line">int:</span><br><span class="line">    - 123</span><br><span class="line">    - 0b1010_0111_0100_1010_1110    #二进制表示</span><br><span class="line">    - 0o14 #十进制</span><br><span class="line">    - 0xC #十六进制</span><br><span class="line">string:</span><br><span class="line">    - 哈哈</span><br><span class="line">    - ‘@’ #可以使用双引号或者单引号包裹特殊字符</span><br><span class="line">    - newline</span><br><span class="line">      newline2    #字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class="line">null:</span><br><span class="line">    parent: ~  #使用~表示null</span><br><span class="line">date:</span><br><span class="line">    - 2018-12-23    #日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="line">datetime: </span><br><span class="line">    - 2018-12-23T20:02:31+08:00    #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></pre></td></tr></table></figure><p>上述例子的JSON表示法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; boolean: [ true, false ],</span><br><span class="line">  float: [ 3.14, 0.0045632 ],</span><br><span class="line">  int: [ 123, 42926 ],</span><br><span class="line">  String: [ &apos;哈哈&apos;, &apos;@&apos;, &apos;newline newline1&apos; ],</span><br><span class="line">  null: [ &#123; parent: null &#125; ],</span><br><span class="line">  date: [ Sun Dec 23 2018 08:00:00 GMT+0800 (中国标准时间) ],</span><br><span class="line">  datetime: [ Sun Dec 23 2018 20:02:31 GMT+0800 (中国标准时间) ] &#125;</span><br></pre></td></tr></table></figure><h2 id="常用特殊符号"><a href="#常用特殊符号" class="headerlink" title="常用特殊符号"></a>常用特殊符号</h2><ol><li><p><code>---</code></p><p>YAML可以在同一个文件中，使用<code>---</code>表示一个文档的开始；比如Spring Boot中application.yml的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microservice-discovery-eureka-ha</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  # 指定profile=peer1</span><br><span class="line">  profiles: peer1</span><br><span class="line">server:</span><br><span class="line">  port: 8761 </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    # 指定当profile=peer1时，主机名是peer1</span><br><span class="line">    hostname: peer1</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      # 将自己注册到peer2这个Eureka上面去</span><br><span class="line">      defaultZone: http://peer2:8762/eureka/</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer2</span><br><span class="line">server:</span><br><span class="line">  port: 8762</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer2</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://peer1:8761/eureka/</span><br></pre></td></tr></table></figure><p>代表定义了两个profile（peer1、peer2），也可以用来分割不同的内容，比如记录日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Time: 2018-12-23T19:02:31+08:00</span><br><span class="line">User: ed</span><br><span class="line">Warning:</span><br><span class="line">     This is an error message for the log file</span><br><span class="line">---</span><br><span class="line">Time: 2018-12-23T19:05:21+08:00</span><br><span class="line">User: ed</span><br><span class="line">Warning:</span><br><span class="line">    A slightly different error message.</span><br></pre></td></tr></table></figure></li><li><p><code>...</code>与<code>---</code></p><p>两个符号一起使用在一个配置文件中代表一个文件的结束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">time: 20:03:20</span><br><span class="line">player: Sammy Sosa</span><br><span class="line">action: strike (miss)</span><br><span class="line">...</span><br><span class="line">---</span><br><span class="line">time: 20:03:47</span><br><span class="line">player: Sammy Sosa</span><br><span class="line">action: grand slam</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>相当于在一个YAML文件中连续写了两个YAML配置项。</p></li><li><p><code>!!</code></p><p>使用<code>!!</code>进行强制类型转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string:</span><br><span class="line">  - !!str 1234</span><br><span class="line">  - !!str false</span><br></pre></td></tr></table></figure><p>允许转换的类型很多：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--- !!set</span><br><span class="line">- Mark McGwire: 65</span><br><span class="line">- Sammy Sosa: 63</span><br><span class="line">- Sammy Sosa: 63</span><br><span class="line">- Ken Griffy: 58</span><br></pre></td></tr></table></figure><p><code>set</code>类型表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># set类型</span><br><span class="line">baseball players: !!set</span><br><span class="line">  ? Mark McGwire</span><br><span class="line">  ? Sammy Sosa</span><br><span class="line">  ? Ken Griffey</span><br><span class="line"># 流式表示</span><br><span class="line">baseball teams: !!set &#123; Boston Red Sox, Detroit Tigers, New York Yankees &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>&gt;</code>和<code>|</code></p><p><code>&gt;</code>在字符串中折叠换行，| 保留换行符，这两个符号在YAML中较为常见，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">accomplishment: &gt;</span><br><span class="line"> Mark set a major league</span><br><span class="line"> home run record in 1998.</span><br><span class="line">stats: |</span><br><span class="line"> 65 Home Runs</span><br><span class="line"> 0.278 Batting Average</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accomplishment=Mark set a major league home run record in 1998.</span><br><span class="line">stats=65 Home Runs</span><br><span class="line"> 0.278 Batting Average,</span><br></pre></td></tr></table></figure><p><strong><em>注意：两个符号前面都要有空格，每行文本的前面也要有空格</em></strong></p><p><code>|</code>符号常见用于在YAML中配置HTML片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phraseTemplate: |</span><br><span class="line">  &lt;p style=&quot;color: red&quot;&gt;</span><br><span class="line">    some template $&#123;msg&#125;</span><br><span class="line">  &lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>引用</p><p>重复的内容在YAML中可以使用<code>&amp;</code>来完成锚点定义，使用<code>*</code>来完成锚点引用，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hr:</span><br><span class="line">- Mark McGwire</span><br><span class="line">- &amp;SS Sammy Sosa</span><br><span class="line">rbi:</span><br><span class="line">- *SS </span><br><span class="line">- Ken Griffey</span><br></pre></td></tr></table></figure><p>可以看到，在<code>hr</code>中，使用<code>&amp;SS</code>为<code>Sammy Sosa</code>设置了一个锚点（引用），名称为<code>SS</code>，在<code>rbi</code>中，使用<code>*SS</code>完成了锚点使用，那么结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;hr=[Mark McGwire, Sammy Sosa], rbi=[Sammy Sosa, Ken Griffey]&#125;</span><br></pre></td></tr></table></figure><p>也可以这样定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SS: &amp;SS Sammy Sosa</span><br><span class="line">hr:</span><br><span class="line"> - Mark McGwire</span><br><span class="line"> - *SS</span><br><span class="line">rbi:</span><br><span class="line"> - *SS </span><br><span class="line"> - Ken Griffey</span><br></pre></td></tr></table></figure><p>注意，不能独立的定义锚点，比如不能直接这样写：<code>&amp;SS Sammy Sosa</code>；另外，锚点能够定义更复杂的内容，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">default: &amp;default</span><br><span class="line">  - Mark McGwire</span><br><span class="line">  - Sammy Sosa</span><br><span class="line">hr: *default</span><br></pre></td></tr></table></figure><p><code>hr</code>相当于引用了<code>default</code>的数组。注意，<code>hr: *default</code>要写在同一行。</p></li></ol><ol start="6"><li><p><code>&lt;&lt;</code></p><p>合并内容。主要和锚点配合使用，可以将一个锚点内容直接合并到一个对象中。示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">merge:</span><br><span class="line">  - &amp;CENTER &#123; x: 1, y: 2 &#125;</span><br><span class="line">  - &amp;LEFT &#123; x: 0, y: 2 &#125;</span><br><span class="line">  - &amp;BIG &#123; r: 10 &#125;</span><br><span class="line">  - &amp;SMALL &#123; r: 1 &#125;</span><br><span class="line">  </span><br><span class="line">sample1: </span><br><span class="line">    &lt;&lt;: *CENTER</span><br><span class="line">    r: 10</span><br><span class="line">    </span><br><span class="line">sample2:</span><br><span class="line">    &lt;&lt; : [ *CENTER, *BIG ]</span><br><span class="line">    other: haha</span><br><span class="line">    </span><br><span class="line">sample3:</span><br><span class="line">    &lt;&lt; : [ *CENTER, *BIG ]</span><br><span class="line">    r: 100</span><br></pre></td></tr></table></figure><p>在<code>merge</code>中，定义了四个锚点，分别在<code>sample</code>中使用。<br>​    <code>sample1</code>中，<code>&lt;&lt;: *CENTER</code>意思是引用<code>{x: 1,y: 2}</code>，并且合并到<code>sample1</code>中，那么合并的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample1=&#123;r=10, y=2, x=1&#125;</span><br></pre></td></tr></table></figure><p><code>sample2</code>中，<code>&lt;&lt;: [*CENTER, *BIG]</code> 意思是联合引用<code>{x: 1,y: 2}</code>和<code>{r: 10}</code>，并且合并到<code>sample2</code>中，那么合并的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample2=&#123;other=haha, x=1, y=2, r=10&#125;</span><br></pre></td></tr></table></figure><p><code>sample3</code>中，引入了<code>*CENTER</code>, <code>*BIG</code>，还使用了<code>r: 100</code>覆盖了引入的<code>r: 10</code>，所以<code>sample3</code>值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample3=&#123;r=100, y=2, x=1&#125;</span><br></pre></td></tr></table></figure><p>有了合并，我们就可以在配置中，把相同的基础配置抽取出来，在不同的子配置中合并引用即可。</p></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/97222440cd08" target="_blank" rel="noopener">https://www.jianshu.com/p/97222440cd08</a></p><p><a href="https://blog.csdn.net/vincent_hbl/article/details/75411243" target="_blank" rel="noopener">https://blog.csdn.net/vincent_hbl/article/details/75411243</a></p><p><a href="https://blog.csdn.net/michaelhan3/article/details/69664932/" target="_blank" rel="noopener">https://blog.csdn.net/michaelhan3/article/details/69664932/</a></p><p><a href="https://yaml.org/spec/1.2/spec.pdf" target="_blank" rel="noopener">https://yaml.org/spec/1.2/spec.pdf</a></p><p><a href="http://nodeca.github.io/js-yaml/" target="_blank" rel="noopener">JS-YAML在线示例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在学习微服务和Spring Cloud开发相关知识，在Spring Boot中，推荐使用properties或者YAML文件来完成配置，所以一开始学习使用的配置文件是properties文件，但是properties文件在表示层级关系和结构关系的方面有所欠缺，对于复杂的数据结构，YAML文件表示的清晰度会远远大于properties文件，所以我们使用YAML文件完成Spring Cloud的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="YAML" scheme="http://yoursite.com/tags/YAML/"/>
    
      <category term="Spring Cloud" scheme="http://yoursite.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>好喝的心灵鸡汤</title>
    <link href="http://yoursite.com/2018/12/07/%E5%A5%BD%E5%96%9D%E7%9A%84%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    <id>http://yoursite.com/2018/12/07/好喝的心灵鸡汤/</id>
    <published>2018-12-07T14:51:33.000Z</published>
    <updated>2019-03-26T14:23:57.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="世界是自己的"><a href="#世界是自己的" class="headerlink" title="世界是自己的"></a>世界是自己的</h2><ul><li><p>人越是过分在乎面子，就越是在乎别人的看法。越是在乎别人的看法，就越会忽略自己的感受。越是忽略自己的感受，就越是像木偶一样拼命活给别人看。最后，一步一步将自己囚禁在了深深的黑暗里。丢失自我，是我们找不到快乐和幸福的根源，也是一切心理问题的根源。</p><a id="more"></a></li><li><p>在这物欲横流的人世间，人生一世实在够苦。你存心做一个与世无争的老实人吧，人家就利用你欺侮你。你稍有才德品貌，人家就嫉妒你排挤你。你大度退让，人家就侵犯你损害你。你要不与人争，就得与世无求，还要维持实力准备斗争。你要和别人和平共处，就先得和他们周旋，还得准备随时吃亏。</p><p>少年贪玩，青年迷恋爱情，壮年汲汲于成名成家，暮年自安于自欺欺人。人寿几何，顽铁能炼成的精金，能有多少？但不同程度的锻炼，必有不同程度的成绩；不同程度的纵欲放肆，必积下不同程度的顽劣。</p><p>上苍不会让所有幸福集中到某个人身上，得到爱情未必拥有金钱；拥有金钱未必得到快乐；得到快乐未必拥有健康；拥有健康未必一切都会如愿以偿。</p><p>保持知足常乐的心态才是淬炼心智，净化心灵的最佳途径。一切快乐的享受都属于精神，这种快乐把忍受变为享受，是精神对于物质的胜利，这便是人生哲学。</p><p>一个人经过不同程度的锻炼，就获得不同程度的修养、不同程度的效益。好比香料，捣得愈碎，磨得愈细，香得愈浓烈。我们曾如此渴望命运的波澜，到最后才发现：人生最曼妙的风景，竟是内心的淡定与从容……我们曾如此期盼外界的认可，到最后才知道：世界是自己的，与他人毫无关系。  ——杨绛先生</p></li></ul><h2 id="谦虚"><a href="#谦虚" class="headerlink" title="谦虚"></a>谦虚</h2><ul><li><p>知书籍之多而吾所见着寡，则不敢以一得自喜；知世变之多而吾所办者少，则不敢以功名自矜。——曾国藩</p></li><li><p>笨拙的人没有智力资本因此比别人更虚心。笨拙的人从小接受挫折教育，因此抗打击能力特别强。笨拙的人不懂取巧，遇到问题只知硬钻过去，因此不留死角。相反，那些有小聪明的人不愿意下“困勉之功”，遇到困难绕着走，基础打得松松垮垮。所以，“拙”看起来慢，其实却是最快，因为这是扎扎实实的成功，不留遗弊。——《曾国藩的正面与侧面》</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;世界是自己的&quot;&gt;&lt;a href=&quot;#世界是自己的&quot; class=&quot;headerlink&quot; title=&quot;世界是自己的&quot;&gt;&lt;/a&gt;世界是自己的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;人越是过分在乎面子，就越是在乎别人的看法。越是在乎别人的看法，就越会忽略自己的感受。越是忽略自己的感受，就越是像木偶一样拼命活给别人看。最后，一步一步将自己囚禁在了深深的黑暗里。丢失自我，是我们找不到快乐和幸福的根源，也是一切心理问题的根源。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何做一个好员工（转载）</title>
    <link href="http://yoursite.com/2018/12/02/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E5%A5%BD%E5%91%98%E5%B7%A5%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/02/如何做一个好员工（转载）/</id>
    <published>2018-12-02T08:01:27.000Z</published>
    <updated>2018-12-02T08:19:41.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你有同理心吗？"><a href="#你有同理心吗？" class="headerlink" title="你有同理心吗？"></a>你有同理心吗？</h2><p>​    <strong>什么叫“同理心”？</strong></p><p>　　说复杂点儿，同理心就是站在当事人的角度和位置上，客观地理解当事人的内心感受，且把这种理解传达给当事人的一种沟通交流方式。</p><p>　　说简单点儿，同理心就是“己所不欲，勿施于人”。将心比心，也就是设身处地去感受、去体谅他人。</p><p>　　说白了，同理心就是“情商”。</p><p>　　具体点说：</p><p>　　同理心就是，领导交办一项工作，你要读懂他的目的、看清他的用意。我经常遇到这样的情况：给团队成员安排工作时，一再询问“我说明白了吗”、“有没有问题”，再三确认后，提交上来的东西仍然答非所问。所以我在接受任务时，总会向领导确认：你想要的是什么?你的目的是什么？了解这个以后，就可以站在他的角度，有效的帮他解决问题。</p><p>　　同理心就是，在激励员工时，点准他们的“兴奋点”，不揭“伤疤”。每个人都有认真工作的理由，家庭富裕的为了证明自己的能力，家境贫寒的为了改善自己的生活，吊儿郎当的爱面子怕丢工作。了解不同人的不同心理需求，才能调动大家的积极性。若是不问青红皂白，拿着鞭子大喊加油，只能是徒劳无功。</p><p>　　同理心就是，在与他人合作时，了解对方的需求和心理，潜移默化的说服对方，双方为了同一个目标而努力。想用强势压服别人，通常不好使。</p><a id="more"></a><h2 id="听话，出活"><a href="#听话，出活" class="headerlink" title="听话，出活"></a>听话，出活</h2><p>​    7 年前，我和北京交通台的潘久阳聊天，他说“什么叫好员工啊，好员工特简单，就四个字：听话、出活”。这话我一直记着，这是至理名言。</p><p>　　<strong>什么叫“听话”？</strong></p><p>​    有句老话叫“干活不由东，累死也无功”，谁是“东”啊？你的直属领导就是“东”，大部分时候，听他的话准没错儿。</p><p>　　有朋友说：我有能力，我比领导水平高，我就不听领导的！咱先不说到底谁水平高——既然他能当你领导，肯定有比你强的地方——咱就说水平和能力这事儿，什么叫“有能力”啊？领导用你，你就有能力。不用你，甭管您有再大的能力，都是白费。</p><p>　　根据我的经验，一般来说，领导都比你水平高，起码在一点上是这样：他比你信息更全面、判断的更准确。因为领导更容易接触到更高层，更了解更高层的意图，他知道的你不知道，你在自己的角度上认为“这么做对”，但领导在更高的层面，并不一定这么看。</p><p>　　还有朋友说我领导就是瞎指挥，明摆着不对，我干嘛要听他的?这是另外一个问题，咱们最后一条会谈到，如果你觉得现在的环境无法进步，就可以考虑离职了。</p><p>　　什么叫“出活”？就是领导给你的工作，你得按时完成并且汇报总结。如果这个工作要持续较长时间，那么你需要阶段性的给领导反馈。我们经常犯一个错误，领导安排的工作，他不问你也不说，黑不提白不提这事儿就算过去了。</p><p>　　过去了?哪儿那么容易啊！领导都记着呢，你等他问你的时候——“诶小陈，上次安排你做的那事儿怎么样了？”——他就已经在心里给你写上了标签：“不靠谱”。</p><p>　　一个“不靠谱”需要用十个“靠谱”来扭转，两个“不靠谱”就很难转变印象，三个“不靠谱”你就没有机会了。</p><p>　　“出活”还有一层含义，就是“超预期”。这个咱们在下一点聊。</p><h2 id="要想人前显贵，必须背地里受罪"><a href="#要想人前显贵，必须背地里受罪" class="headerlink" title="要想人前显贵，必须背地里受罪"></a>要想人前显贵，必须背地里受罪</h2><p>​    在公司里上班，大家的智商都差不多，谁也不比谁强多少，拼的都是努力和用心的程度。你下功夫了，就比别人做得好。哦，本来就不比别人聪明，别人下班你也下班、别人玩儿你也玩儿、别人搞对象你也泡马子，你凭什么比别人干得好？</p><p>　　“要想人前显贵，必须背地里受罪”的道理并不难懂。就是真到受苦的时候就含糊了，有的人会说，我年纪轻轻的为什么不好好享受生活啊？这种想法很普遍，这本是一个价值观的问题，没什么可说的，一个人想怎么生活都对。但是有一些朋友是在追求理想和享受生活中纠结的，和这些朋友，是可以聊的。</p><p>　　马云曾经说过：我们追求的应是人生的大平衡，而不是一时一日的小平衡(大意如此)。新东方也有一句话说：怕吃苦吃苦一辈子，不怕苦吃苦半辈子。两句话大意相同，值得深思。</p><p>　　一件工作，你用心想了做了，领导一看就知道，你想糊弄，也是一看就知道，这个没侥幸。领导在判断这个问题的时候，标准很简单：我想到的，你都没想到，肯定没用心；我想到的，你想到了一部分，用心不够；我没想到的，你想到了，这是用心了——这就是“超预期”。如果你每次都能给你的老板一个超预期的结果，那你无疑就是一个好员工。</p><h2 id="能忍多大事儿，就能成多大事儿"><a href="#能忍多大事儿，就能成多大事儿" class="headerlink" title="能忍多大事儿，就能成多大事儿"></a>能忍多大事儿，就能成多大事儿</h2><p>​    讲一个笑话：</p><p>　　在电梯里，领导放了个屁，回头问秘书，谁放的?秘书忙答道：“不是我！”领导不说话，这事儿过去了。不久，秘书被调离，领导在谈起调离原因时说道：“屁大的委屈都受不了，还能做的了啥？”</p><p>　　在工作上想受到领导的赏识和重用，除了要有过硬的工作能力外，更重要的，要有足够的涵养(抗压力或者回血能力)。能受多大委屈，才能成多大事儿，这是一定的。为了考察你的“抗压力”，领导有时会故意试你，你可一定要经得住考验。</p><p>　　我自己也经历过类似的事情：</p><p>　　有一天加班，晚上 2 点钟到家，收到老板的一封邮件，批评我工作不到位。我收到邮件后就很崩溃，还很委屈。于是当即奋笔疾书，回邮件!解释我是如何工作的，我做的如何有道理，我做的如何有效果……写了 2000 多字。</p><p>　　写完了，我好像冷静了一些，我就琢磨一个事儿：如果我是老板，我对一个员工工作不满意，于是我给他写了封邮件批评他，我想看到的是他洋洋洒洒的解释和辩解吗?显然不是啊。然后我就突然明白了，于是我把那 2000 多字都删了，简单回复了一句话，大意是：我会反思工作的问题，然后尽快整改。</p><p>　　两个月后我晋升了。在我的晋升仪式上，我对我老板说起这件事，他对我说，我知道你很委屈，我就是想看看你在面对委屈和压力时，会有怎样的反应，这体现了一个人的成熟程度。</p><p>　　多说一句，人们会感叹“钱难赚，屎难吃”，人人都想“站着把钱赚了”，我更相信他跪着的时候你没看见。我们总是强调“尊严”，比尔盖茨说过一句话：“没有人会在乎你的尊严，你只能在自我感觉良好之前取得尽可能多成就。”</p><p>　　对于比尔盖茨这样的天才姑且如此，况且我这样资质平庸的碌碌之辈呢?</p><h2 id="总躲着领导，你就危险了"><a href="#总躲着领导，你就危险了" class="headerlink" title="总躲着领导，你就危险了"></a>总躲着领导，你就危险了</h2><p>​    不少人躲着领导，尽量少跟领导说话、绕着领导走。因为跟领导近了事儿就多，不跟领导多接触，事儿少，多清闲。这是“一叶障目，不见泰山”。</p><p>　　如果你想在工作上取得一些成绩，我建议还是应该主动的多和领导沟通。领导在平时开会时说的多是大面儿上的话，真话、有用的话、有价值的话不一定说。这并不是他不想说，而是没机会说。</p><p>　　有心的员工会随时抽时间和领导沟通、增加私人交流的机会：一起吃饭、一起抽烟、一起上下班、甚至一起打球K歌……通过这样的机会，你可以了解领导对于你的看法、对于工作的观点，这些都有益于你调整自己的工作的方式。</p><p>　　有朋友担心这样做会引起领导反感，其实完全不会，领导们多是孤独的，如果他发现有一个员工虚心向他请教、积极分享工作的思考，他是非常高兴的。</p><p>　　有朋友说，我不想那么累，我就想混混日子。即便是这样，你最好也主动和领导沟通、主动汇报。你追着他，你是主动的一方，其实你不累;等到他追你的时候，你就被动了，最终就累死了。</p><p>　　老罗曾经讲过一个故事，说你进入单位，见到老板就低头过去、不理他，他当然也不理你。等到年终考核、或者裁员的时候，老板隐约记得有你这么个人，但不知道你的名字、更不知道你做了什么。老板会想：这是你的错，不是我的错。不开除你开除谁？</p><p>　　老板也是人，大家用人类的方式沟通，一切会变得简单很多。</p><h2 id="帮助别人千万别吝啬"><a href="#帮助别人千万别吝啬" class="headerlink" title="帮助别人千万别吝啬"></a>帮助别人千万别吝啬</h2><p>​    马云曾经说，成功就是成就自己帮助别人。这话没错。</p><p>　　如果你在一家公司工作，你发现你的工作不用任何人协助就能自己独立完成，那你多半是个打杂的。相反，你的工作需要越多人协作，就越复杂、越高级。在实际工作中我发现，我处在一个协作关系网中，如果没有别人的帮助，我就无法工作下去。</p><p>　　当你正在忙于某项工作时，有同事来向你“求助”，很多时候我们会很直接、甚至粗暴的拒绝，殊不知这样做正在给你今后的工作种下麻烦的种子。风水轮流转，在一家公司里，大家的工作互相交叉的几率很大，说不定你会用上谁，这些人脉关系需要平时去维护。今天你帮助了人家，说不定明天对方就会成为你的救命稻草，这非常可能。</p><p>　　有一天我正在疲于应付一个项目总结，这时有个其他部门的同事来找我聊合作的事儿，我并不认识他，我耐心的和他介绍了情况，并且真的形成了几次愉快的合作，半年后，我的晋升答辩会上，我发现他是我的答辩委员……</p><h2 id="目标再目标，量化再量化"><a href="#目标再目标，量化再量化" class="headerlink" title="目标再目标，量化再量化"></a>目标再目标，量化再量化</h2><p>​    没有目标的，都不叫工作;没有量化的，都不叫目标。</p><p>　　在接受一项工作时，先问目标是什么;在布置一项工作时，先交代目标是什么。这个不说清楚，都是扯淡。</p><p>　　不想成为蒙着眼睛拉磨的驴？那么除了清楚的知道自己的目标外，还得知道你的部门、你的公司的目标，最关键的，你需要知道，你的工作在总体目标中处在什么地位、扮演什么角色。如果你发现，你工作的目标和总体目标关系很小、甚至没有关系，那么你就很容易被拿掉。</p><p>　　辞退员工，或给员工绩效打分“不合格”是很令人头疼的，但其实这事儿并不难。关键就在于事先和每个员工一起制定量化的工作目标，并且随时提醒员工，他的工作是否达到了要求。没有达到量化指标，辞退或“不合格”是令所当然事儿，在数据面前，再矫情的人也无话可说。相反，如果谈感觉、聊希望，这事儿就没法办了。</p><h2 id="找到解决问题的办法是我的义务"><a href="#找到解决问题的办法是我的义务" class="headerlink" title="找到解决问题的办法是我的义务"></a>找到解决问题的办法是我的义务</h2><p>​    领导安排的工作，不能说“我做不了”、“我做不到”。</p><p>　　公司请我们来工作，是为了解决问题的，如果不能解决问题，我们就没有价值。工作推进中遇到困难，无法继续进行，这是很正常的事儿，我们需要做的是主动寻找答案和办法，哪怕你的办法不妥，那么就去问，但无论如何不能对你的领导说，我不会。</p><p>　　前天，我在公司里听见隔壁团队的领导安排同事定一个会议室，有公司工作经验的人都知道，会议室是很难订到的，弄不好还需要“托关系，走后门”。这个小同学可能是没有订到，于是和他的领导说“我没订到”，他的领导直接就急了，说：“那怎么办？需要我来订吗？”</p><p>　　这位领导发火是有道理的，这位小同学在发现自己订不到会议室后，应该做的是自己想办法解决问题——最简单的就是向老同事咨询。</p><p>　　解决问题的能力是员工最关键的能力，没有之一。在工作中遇到困难特别正常，在这时，我们有一项义务，就是找到解决问题的办法。</p><h2 id="尽量不说“不是我，我没有”"><a href="#尽量不说“不是我，我没有”" class="headerlink" title="尽量不说“不是我，我没有”"></a>尽量不说“不是我，我没有”</h2><p>​    绝大多数人在面对批评的时候，本能反应都是推卸责任，此时的口头禅就是“不是我”、“没有我”。我总觉得，很多时候，越成熟的人，就越少用本能反应面对问题，因为他们有更强的自控力。</p><p>　　尽量不说“不是我”、“没有我”这样的话，因为这些话毫无作用，领导听惯了这样的推卸之词，丝毫不会为之所动。此时如果能够主动承担责任，反而体现了一种担</p><p>　　当。即便真是被冤枉了，当场辩解往往也不是最明智的选择，可以先保持沉默，私下找机会和领导进行沟通。这个详见第三条。</p><h2 id="“言多必失”死得惨"><a href="#“言多必失”死得惨" class="headerlink" title="“言多必失”死得惨"></a>“言多必失”死得惨</h2><p>​    在公司里，少说闲话，不说是非话，不做是非人。</p><p>　　你就相信一点：你说的每句话，你的老板都会知道。好话可能不一定，坏话则是一定的。</p><p>　　还是做个正直的人吧，这样最简单，也受益最大。正直人的原则是：批评当面说，赞美背后讲。</p><h2 id="知道什么时候离开"><a href="#知道什么时候离开" class="headerlink" title="知道什么时候离开"></a>知道什么时候离开</h2><p>好多同事和朋友和我聊过离职的话题，我对朋友们的建议是，如果你因为觉得工作不爽，那就别离职，因为甭管到哪里，都会不爽：老板不喜欢、同事不可爱、工作太劳累、关系太复杂……我以我在多家大公司工作的经历担保：几乎所有我工作过的公司，令人不爽的事儿都是一样的。</p><p>　　那么什么时候离开呢？我想，有两种情况：</p><ol><li><p>在这家公司，你已经没有上升的空间、无法学习到更多的东西了；</p></li><li><p>在这家公司，你已学到足够的知识，可以在新领域或新平台上一展身手了。</p></li></ol><pre><code>## 本文转载自：[孤傲苍狼的博客](https://www.cnblogs.com/xdp-gacl/p/3854574.html)[百度员工离职总结](https://news.cnblogs.com/n/213563/)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;你有同理心吗？&quot;&gt;&lt;a href=&quot;#你有同理心吗？&quot; class=&quot;headerlink&quot; title=&quot;你有同理心吗？&quot;&gt;&lt;/a&gt;你有同理心吗？&lt;/h2&gt;&lt;p&gt;​    &lt;strong&gt;什么叫“同理心”？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　说复杂点儿，同理心就是站在当事人的角度和位置上，客观地理解当事人的内心感受，且把这种理解传达给当事人的一种沟通交流方式。&lt;/p&gt;
&lt;p&gt;　　说简单点儿，同理心就是“己所不欲，勿施于人”。将心比心，也就是设身处地去感受、去体谅他人。&lt;/p&gt;
&lt;p&gt;　　说白了，同理心就是“情商”。&lt;/p&gt;
&lt;p&gt;　　具体点说：&lt;/p&gt;
&lt;p&gt;　　同理心就是，领导交办一项工作，你要读懂他的目的、看清他的用意。我经常遇到这样的情况：给团队成员安排工作时，一再询问“我说明白了吗”、“有没有问题”，再三确认后，提交上来的东西仍然答非所问。所以我在接受任务时，总会向领导确认：你想要的是什么?你的目的是什么？了解这个以后，就可以站在他的角度，有效的帮他解决问题。&lt;/p&gt;
&lt;p&gt;　　同理心就是，在激励员工时，点准他们的“兴奋点”，不揭“伤疤”。每个人都有认真工作的理由，家庭富裕的为了证明自己的能力，家境贫寒的为了改善自己的生活，吊儿郎当的爱面子怕丢工作。了解不同人的不同心理需求，才能调动大家的积极性。若是不问青红皂白，拿着鞭子大喊加油，只能是徒劳无功。&lt;/p&gt;
&lt;p&gt;　　同理心就是，在与他人合作时，了解对方的需求和心理，潜移默化的说服对方，双方为了同一个目标而努力。想用强势压服别人，通常不好使。&lt;/p&gt;
    
    </summary>
    
    
      <category term="职场感悟" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>2018新版hexo+github搭建个人博客</title>
    <link href="http://yoursite.com/2018/11/25/2018%E6%96%B0%E7%89%88Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/11/25/2018新版Hexo+github搭建个人博客/</id>
    <published>2018-11-25T01:07:54.000Z</published>
    <updated>2018-11-29T14:39:47.291Z</updated>
    
    <content type="html"><![CDATA[<p>从学生时代开始就有做笔记和总结的习惯，以前的笔记都是在本子上，经常不知不觉就做了很多笔记，每次回头看到那么多工整漂亮（嗯，就是自恋&gt;o&lt;）的笔记成就感就油然而生。现在已经是信息时代了，购物也从线下搬到线上，想必笔记也应该如此。俗话说，“好记性不如烂笔头”，希望自己搭建的这个博客能够成为自己以后的笔记本。</p><p>本人博客预览：<a href="https://cloudyunfan.github.io/" target="_blank" rel="noopener">cloudyunfan@github.io</a></p><p>搭建环境：Windows10</p><a id="more"></a><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><h2 id="拥有github账户"><a href="#拥有github账户" class="headerlink" title="拥有github账户"></a>拥有github账户</h2><p>已经有github账户，如果没有的话，先注册一个，参考这个链接<a href="https://baijiahao.baidu.com/s?id=1585321093723946922&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">GitHub注册及使用流程</a>，注意邮箱要确认注册，否则无法新建repository。</p><p><strong>踩坑提醒：</strong></p><p>github设置公钥以后，第一次使用时出现以下提示，记得选择yes：</p><p><img src="https://cloudyunfan.github.io/images/RSA.png" alt="提示"></p><p>​        这个提示出现的原因是：第一次连接远程主机的时候，为了避免中间人攻击——如果有人中间截获了你的登录请求，并且模拟ssh服务端的话，你的密码就会泄漏，所以ssh要询问一下，选择yes确认把服务端的信息加入本地的~/.ssh/known_hosts文件，下次再连接同一台主机的时候则不会再询问了。（参考<a href="https://www.jianshu.com/p/27d8b8d1d571" target="_blank" rel="noopener">如何用ssh key在网络上畅通无阻</a>）</p><h2 id="必要软件"><a href="#必要软件" class="headerlink" title="必要软件"></a>必要软件</h2><ul><li><p><strong>Notepad++</strong></p><p>Notepad++比 Windows中的Notepad（记事本）强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。良心软件，非常好用，实力避坑！</p></li><li><p><strong>Haroopad/Typora</strong></p><p>Windows环境下比较好的Markdown文本编辑器，用于编写博客及修改部分hexo文档。</p></li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="node-js环境搭建"><a href="#node-js环境搭建" class="headerlink" title="node.js环境搭建"></a>node.js环境搭建</h2><p>在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a>下载新版的node.js环境安装，安装过程一路next即可，除了下图的选择要注意一下：</p><p><img src="https://cloudyunfan.github.io/images/node.jpg" alt="node.js"></p><p>安装完按住Win+R打开cmd，运行node -v和npm -v查看node.js和npm的版本信息，出现以下界面则说明安装成功，否则请检查前面的安装过程，看是否有所遗漏：</p><p><img src="https://cloudyunfan.github.io/images/cmd.png" alt="version"></p><h2 id="Git环境搭建"><a href="#Git环境搭建" class="headerlink" title="Git环境搭建"></a>Git环境搭建</h2><p>首先下载Git安装文件：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>按照以下步骤安装：</p><p><img src="https://cloudyunfan.github.io/images/Git1.jpg" alt="Git1"></p><p><img src="https://cloudyunfan.github.io/images/Git2.jpg" alt="Git2"></p><p>和Node.js一样，大部分情况都只需要保持默认设置，但是出于操作方便考虑，建议PATH选项按照下图选择：</p><p><img src="https://cloudyunfan.github.io/images/Git3.jpg" alt="Git3"></p><p>上图选择的选项的解释是：出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在cmd界面下调用Git，不用打开Git Bash了。</p><p>同样，在cmd窗口运行git –version，出现下图的版本信息则说明安装成功：</p><p><img src="https://cloudyunfan.github.io/images/Git.png" alt="Git"></p><h1 id="博客正式搭建"><a href="#博客正式搭建" class="headerlink" title="博客正式搭建"></a>博客正式搭建</h1><h2 id="github设置"><a href="#github设置" class="headerlink" title="github设置"></a>github设置</h2><ul><li><p>创建代码库</p><p>在Repository name下填写yourname.github.io，Description 下填可以写一些描述，如图：</p><p><img src="https://cloudyunfan.github.io/images/repo.png" alt="repo"></p><p><strong>踩坑提醒：</strong></p><p>图中的yourname必须为github的用户名，在这里就是cloudyunfan，否则在这里就无法用<code>https://cloudyunfan.github.io</code>直接访问，而只能用<code>https://cloudyunfan.github.io/yourname.github.io</code>访问。</p></li><li><p>开启gh-pages功能</p><p>点击界面右侧的Settings，可以看到库的setting页面，向下拖动，直到看见GitHub Pages</p><p><img src="https://cloudyunfan.github.io/images/settings.png" alt="settings"></p><p>在GitHub Page中选择master分支：</p><p><img src="https://cloudyunfan.github.io/images/master.png" alt="master"></p><p>去到你本地想建立项目的文件夹，克隆新建的库到本地（使用公钥注意用SSH链接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/yourname/yourname.github.io</span><br></pre></td></tr></table></figure><p>进入项目文件夹，增加一个index.html文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd username.github.io</span><br><span class="line">$ echo &quot;Hello World&quot; &gt; index.html</span><br></pre></td></tr></table></figure><p>把变更推送到github上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add --all</span><br><span class="line">$ git commit -m &quot;Initial commit&quot;</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>接下来就是可以访问<code>https://yourname.github.io</code>页面啦，此页面出现的是index.html的Hello World。如果可以正常访问页面，那么Github这边的配置则结束了。接下来讲解hexo这边的配置。</p></li></ul><h2 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>假设我们在e盘新建了一个文件夹hexo，首先在cmd或MINGW64窗口（Git Bash打开）运行一下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd e:/hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><p>blog文件夹是我们通过初始化命令hexo init自动建立的。在cmd窗口运行hexo -v，出现下图的版本信息则说明安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo: 3.8.0</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 10.0.17134 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.13.0</span><br><span class="line">v8: 6.8.275.32-node.36</span><br><span class="line">uv: 1.23.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.14.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.34.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.1.0i</span><br><span class="line">icu: 62.1</span><br><span class="line">unicode: 11.0</span><br><span class="line">cldr: 33.1</span><br><span class="line">tz: 2018e</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，blog文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>接下来，hexo生成静态文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 或者hexo generate</span><br><span class="line">$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看</span><br></pre></td></tr></table></figure><p>网页运行<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 可以看到如下页面，则说明配置成功：</p><p><img src="https://cloudyunfan.github.io/images/hexo.png" alt="hexo"></p><p>到目前为止，hexo在本地电脑的安装配置已经全部结束，接下面讲解如何将hexo和github page关联起来。</p><h3 id="踩坑提醒（坑有点多）："><a href="#踩坑提醒（坑有点多）：" class="headerlink" title="踩坑提醒（坑有点多）："></a>踩坑提醒（坑有点多）：</h3><ul><li><p><code>hexo g</code>生成静态文件的时候报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">ERROR Local hexo not found in E:\hexo\blog</span><br><span class="line">ERROR Try running: &apos;npm install hexo --save&apos;</span><br></pre></td></tr></table></figure></li></ul><p>​      <strong>解决方法</strong>：删除node_modules文件夹 ，执行<code>npm install</code>，详情可参考<a href="https://blog.csdn.net/xcantloadx/article/details/78296227" target="_blank" rel="noopener">https://blog.csdn.net/xcantloadx/article/details/78296227</a></p><ul><li><p><code>hexo g</code>报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">npm WARN engine hexo@3.8.0: wanted: &#123;&quot;node&quot;:&quot;&gt;=6.9.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;4.2.3&quot;,&quot;npm&quot;:&quot;2.14.7&quot;&#125;)</span><br><span class="line">npm WARN deprecated titlecase@1.1.2: no longer maintained</span><br><span class="line">npm WARN engine hexo-fs@0.2.3: wanted: &#123;&quot;node&quot;:&quot;&gt;=6.9.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;4.2.3&quot;,&quot;npm&quot;:&quot;2.14.7&quot;&#125;)</span><br><span class="line">npm WARN engine nunjucks@3.1.4: wanted: &#123;&quot;node&quot;:&quot;&gt;= 6.9.0 &lt;= 11.1.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;4.2.3&quot;,&quot;npm&quot;:&quot;2.14.7&quot;&#125;)</span><br></pre></td></tr></table></figure><p>仔细看警告，可以发现警告的意思是node.js环境的版本过低，这在安装的时候没有问题，可是后续会导致hexo命令失效的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">Usage: hexo</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">help Get help on a command</span><br><span class="line">init Create a new Hexo folder</span><br><span class="line">migrate Migrate your site from other system to Hexo</span><br><span class="line">version Display version information</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">--debug Display all verbose messages in the terminal</span><br><span class="line">--safe Disable all plugins and scripts</span><br><span class="line"></span><br><span class="line">For more help, you can use hexo help [command] for the detailed information</span><br><span class="line">or you can check the docs: http://zespia.tw/hexo/docs/</span><br></pre></td></tr></table></figure></li></ul><p>​       <strong>解决方法</strong>：下载新版本的node.js安装</p><ul><li><p><code>hexo d</code>的时候找不到部署器（后续部署的坑）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：需要提前安装一个扩展<code>npm install hexo-deployer-git --save</code></p></li><li><p>安装webpack出现警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">C:\Users\yunfa\AppData\Roaming\npm\hexo -&gt; C:\Users\yunfa\AppData\Roaming\npm\node_modules\hexo-cli\bin\hexo</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\hexo-cli\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br></pre></td></tr></table></figure><p><strong>出现原因</strong>：fsevent是mac osx系统的，在win或者Linux下使用了 所以会有警告，忽略即可。</p></li></ul><h1 id="关联hexo与github-page"><a href="#关联hexo与github-page" class="headerlink" title="关联hexo与github page"></a>关联hexo与github page</h1><h2 id="配置Git个人信息（以前配置过则不用配置）"><a href="#配置Git个人信息（以前配置过则不用配置）" class="headerlink" title="配置Git个人信息（以前配置过则不用配置）"></a>配置Git个人信息（以前配置过则不用配置）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;cloudyunfan&quot;</span><br><span class="line">git config --global user.email &quot;yunfan2clouyf@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>可以通过<code>$ git config --list</code>查看Git配置</p><h2 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h2><p>找到路径e:/hexo/blog/下的_config.yml文件，配置deploy如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:cloudyunfan/cloudyunfan.github.io.git #github上的仓库SSH地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>执行以下命令新建博客：</p><p><code>hexo new post &quot;your title&quot;</code></p><p>然后在我的电脑的目录下e:\hexo\blog\source\ _posts 将会看到 <code>your title.md</code>文件，用MarkDown编辑器编辑文章，运行生成、部署命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成</span><br><span class="line">hexo d   # 部署</span><br></pre></td></tr></table></figure><p>等价于<code>hexo d -g #在部署前先生成</code>命令。部署成功后访问<code>https://yourname.github.io</code>将可以看到新的文章。</p><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>Hexo安装过后,默认的主题是landscape，有两个比较好的主题推荐给大家。 Yilia 主题是为 hexo 2.4+制作的主题， 崇尚简约优雅，以及极致的性能。NexT主题简洁美观，是目前Github上Star最高的Hexo主题，支持若干种不同的风格，这个主题确实很成熟，优化、配置、扩展很多都集成了，比较简单。下面以<strong>NexT</strong>主题为例配置主题。</p><h2 id="配置NexT主题"><a href="#配置NexT主题" class="headerlink" title="配置NexT主题"></a>配置NexT主题</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 再修改配置文件即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd blog</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>当克隆/下载完成后，注意blog文件夹中有两个<code>_config.yml</code>文件，分别为<strong>站点配置文件</strong>和<strong>主题配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 站点配置文件</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">    ├── landscape</span><br><span class="line">    └── next</span><br><span class="line">         └── _config.yml # 主题配置文件</span><br></pre></td></tr></table></figure><p>打开<strong>站点配置文件</strong>， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>NexT 主题安装完成后我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好先用 <code>hexo clean</code> 来清除 hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>启动hexo本地站点并开启调试模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s –debug</span><br></pre></td></tr></table></figure><p>使用调试模式的好处是可以将详细消息记录到终端和<code>debug.log</code> 文件，在服务启动的过程，注意观察终端输出是否有异常信息，如果碰到问题，这些信息将帮助我们更好的定位错误。当终端输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>我们就可以使用浏览器访问<code>http://localhost:4000</code>，如果出现以下外观（NexT 默认的 Scheme是Muse），则说明主题安装成功：</p><p><img src="https://cloudyunfan.github.io/images/next.png" alt="next"></p><h3 id="hexo的scheme"><a href="#hexo的scheme" class="headerlink" title="hexo的scheme"></a>hexo的scheme</h3><table><thead><tr><th>Scheme</th><th>样式</th></tr></thead><tbody><tr><td>Muse</td><td>默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</td></tr><tr><td>Mist</td><td>Muse 的紧凑版本，整洁有序的单栏外观</td></tr><tr><td>Pisces</td><td>双栏 Scheme，小家碧玉似的清新</td></tr><tr><td>Gemini</td><td>与Pisces相似，阴影效果有所区别</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes 注释掉不用的Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h3 id="基础信息设置"><a href="#基础信息设置" class="headerlink" title="基础信息设置"></a>基础信息设置</h3><p>设置主题的语言、博客名字、站点描述、作者昵称等信息，编辑<strong>站点配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 为梦想加油！！！ #博客名</span><br><span class="line">subtitle: 大柔非柔，至刚无刚</span><br><span class="line">description: 安而后能虑，虑而后能得 #站点描述可以是你喜欢的一句签名:)</span><br><span class="line">keywords:</span><br><span class="line">author: ** #昵称</span><br><span class="line">language: zh-CN #设置语言为简体中文</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>​       目前NexT 支持的语言可以参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官网</a></p><h3 id="设定菜单内容"><a href="#设定菜单内容" class="headerlink" title="设定菜单内容"></a>设定菜单内容</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。</p><p>编辑<strong>主题配置文件</strong>， 菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。<code>||</code>运算符后面代表的是图标名称，如没有设置或者设置无效的 Font Awesome 图标名字，则会显示问号图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  schedule: /schedule/ || calendar</span><br><span class="line">  sitemap: /sitemap.xml || sitemap</span><br><span class="line">  commonweal: /404/ || heartbeat</span><br><span class="line">  psychology: /psych/</span><br></pre></td></tr></table></figure><p>NexT 默认的菜单项有（<em>斜体</em>表示的页面要手动创建）</p><table><thead><tr><th>键值</th><th>设定值</th><th>显示文本（简体中文）</th></tr></thead><tbody><tr><td>home</td><td><code>home: /</code></td><td>主页</td></tr><tr><td>archives</td><td><code>archives: /archives</code></td><td>归档页</td></tr><tr><td>categories</td><td><code>categories: /categories</code></td><td><em>分类页</em></td></tr><tr><td>tags</td><td><code>tags: /tags</code></td><td><em>标签页</em></td></tr><tr><td>about</td><td><code>about: /about</code></td><td><em>关于页面</em></td></tr><tr><td>commonweal</td><td><code>commonweal: /404.html</code></td><td><em>公益 404</em></td></tr></tbody></table><h3 id="设置菜单项的显示文本"><a href="#设置菜单项的显示文本" class="headerlink" title="设置菜单项的显示文本"></a>设置菜单项的显示文本</h3><p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的<code>languages/{language}.yml</code>文件</p><p>（<code>{language}</code> 为你所使用的语言）。</p><p>以简体中文为例，若你需要添加一个菜单项，比如 <code>psychology</code>。那么就需要修改简体中文对应的翻译文件<code>languages/zh-CN.yml</code>，在 <code>menu</code> 字段下添加一项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  psychology: 心理学</span><br></pre></td></tr></table></figure><blockquote><p>请注意键值（如 <code>home</code>）的大小写要严格匹配</p></blockquote><h3 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改<strong>主题配置文件</strong>中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p><ul><li>left - 靠左放置</li><li>right - 靠右放置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br></pre></td></tr></table></figure><blockquote><p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。影响版本5.0.0及更低版本。 </p></blockquote><p>设置侧栏显示的时机</p><p>修改 <code>sidebar.display</code> 的值，支持的选项有：</p><ul><li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li><li><code>always</code> - 在所有页面中都显示</li><li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li><li><code>remove</code> - 完全移除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure><blockquote><p>已知侧栏在 <code>use motion: false</code> 的情况下不会展示。 影响版本5.0.0及更低版本。</p></blockquote><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>编辑<strong>主题配置文件</strong>， 修改字段 <code>avatar</code>， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p><ul><li>完整的互联网 URI：<code>http://example.com/avatar.png</code></li><li>站点内的地址：将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在）  配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下  配置为：<code>avatar: /images/avatar.png</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avatar: </span><br><span class="line">  url: http://example.com/avatar.png</span><br></pre></td></tr></table></figure><h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><p>为了我们的博客能够更好的被搜索引擎收录以及被其他人订阅，我们可以添加sitemap、baidusitemap和feed插件，切换到你本地的hexo 的blog目录，在命令行窗口，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed -save</span><br><span class="line">$ npm install hexo-generator-sitemap -save</span><br><span class="line">$ npm install hexo-generator-baidusitemap -save</span><br></pre></td></tr></table></figure><p>修改<strong>站点配置文件</strong>，增加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">Plugins: </span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line">- hexo-generator-baidusitemap</span><br><span class="line"># Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"># sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line"># baidusitemap</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>部署<code>hexo d -g</code>，就可以访问 <a href="https://cloudyunfan.github.io/atom.xml" target="_blank" rel="noopener">https://cloudyunfan.github.io/atom.xml</a> 和 <a href="https://cloudyunfan.github.io/atom.xml" target="_blank" rel="noopener">https://cloudyunfan.github.io/sitemap.xml</a> 、<a href="https://cloudyunfan.github.io/baidusitemap.xml" target="_blank" rel="noopener"> https://cloudyunfan.github.io/baidusitemap.xml </a>这三个文件了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p><p><a href="https://www.jianshu.com/p/1c2e9f19d14f" target="_blank" rel="noopener">https://www.jianshu.com/p/1c2e9f19d14f</a></p><p><a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">http://theme-next.iissnan.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从学生时代开始就有做笔记和总结的习惯，以前的笔记都是在本子上，经常不知不觉就做了很多笔记，每次回头看到那么多工整漂亮（嗯，就是自恋&amp;gt;o&amp;lt;）的笔记成就感就油然而生。现在已经是信息时代了，购物也从线下搬到线上，想必笔记也应该如此。俗话说，“好记性不如烂笔头”，希望自己搭建的这个博客能够成为自己以后的笔记本。&lt;/p&gt;
&lt;p&gt;本人博客预览：&lt;a href=&quot;https://cloudyunfan.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cloudyunfan@github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搭建环境：Windows10&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
